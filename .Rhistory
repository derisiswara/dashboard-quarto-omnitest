for (i in 1:length(fakultas)) {
cat(fakultas[i], " -> ", fakultas_map[fakultas[i]], "\n")
}
fakultas_map[df1$faculty]
df1$faculty <- fakultas_map[df1$faculty]
df1$faculty
# Cek hasil
head(df1)
# Membuat nama-nama random untuk program studi
# Contoh prefiks untuk jenjang pendidikan
jenjang <- c("S1", "S2", "D3", "D4")
# Contoh nama-nama program studi acak
nama_program <- c(
"Biologi", "Matematika", "Fisika", "Kimia", "Astronomi",
"Akuntansi", "Manajemen", "Ekonomi", "Bisnis Digital", "Keuangan",
"Hukum", "Ilmu Politik", "Administrasi Publik", "Hubungan Internasional",
"Psikologi", "Sosiologi", "Antropologi", "Arkeologi", "Filsafat",
"Sastra Indonesia", "Sastra Inggris", "Sastra Jepang", "Sastra Mandarin",
"Kedokteran", "Kedokteran Gigi", "Farmasi", "Kesehatan Masyarakat", "Keperawatan",
"Arsitektur", "Teknik Sipil", "Teknik Lingkungan", "Perencanaan Wilayah",
"Ilmu Komputer", "Sistem Informasi", "Teknik Informatika", "Data Science",
"Desain Grafis", "Desain Interior", "Seni Murni", "Fotografi", "Animasi",
"Pertanian", "Peternakan", "Kehutanan", "Perikanan", "Agribisnis",
"Pariwisata", "Perhotelan", "Kuliner", "Media dan Komunikasi", "Jurnalistik"
)
# Membuat kombinasi random untuk program studi
program_studi <- unique(df1$ProgramStudi)
sample_jenjang <- sample(jenjang, length(program_studi), replace = TRUE)
sample_program <- sample(nama_program, length(program_studi), replace = TRUE)
random_program_baru <- paste(sample_jenjang, sample_program)
# Membuat mapping dengan nama-nama baru
program_studi_map_baru <- setNames(random_program_baru, program_studi)
# Tampilkan beberapa mapping program studi dengan nama baru (10 pertama)
print("\nMapping Program Studi dengan Nama Baru (10 pertama) (Asli -> Random):")
for (i in 1:min(10, length(program_studi))) {
cat(program_studi[i], " -> ", program_studi_map_baru[program_studi[i]], "\n")
}
# Terapkan mapping ke dataframe asli
df1$faculty <- fakultas_map[df1$faculty]
df1$ProgramStudi <- program_studi_map_baru[df1$ProgramStudi]  # atau program_studi_map_baru
# Cek hasil
head(df1)
fakultas_map[df1$faculty]
# Seed untuk reproduksi hasil yang sama (opsional)
set.seed(20250503)
# Buat nama fakultas random
random_fakultas_names <- c(
"Fakultas Sains dan Teknologi", "Fakultas Humaniora", "Fakultas Kedokteran",
"Fakultas Pertanian", "Fakultas Hukum", "Fakultas Psikologi",
"Fakultas Seni Rupa"
)
# Acak urutan nama fakultas random
fakultas <- unique(df1$faculty)
random_fakultas <- sample(random_fakultas_names, length(fakultas), replace = FALSE)
# Buat mapping dari fakultas asli ke fakultas acak
fakultas_map <- setNames(random_fakultas, fakultas)
# Tampilkan mapping fakultas
print("Mapping Fakultas (Asli -> Random):")
for (i in 1:length(fakultas)) {
cat(fakultas[i], " -> ", fakultas_map[fakultas[i]], "\n")
}
library(shiny)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(DT)
# Memuat data
df1 <- read_excel("teskepribadian_export_20241021.xlsx")
# Cek NA
#sum(is.na(df1$Fakultas))
#sum(is.na(df1$ProgramStudi))
# Delete data if "current_distress", "variable_response_inconsistency" >= 70
df1 <- df1[!(df1$variable_response_inconsistency >= 70),]
# Preproses data - Hapus Kata Fakultas di Kolom Fakultas
df1$Fakultas <- gsub("Fakultas ", "", df1$Fakultas)
df1 <- df1 |>
# Delete duplicate rows if all column values are the same
distinct(.keep_all = TRUE)
df1[df1$Fakultas == "Komunikasi Dan Ilmu Sosial","Fakultas"] <- "Komunikasi dan Ilmu Sosial"
#  unique(df1$ProgramStudi)
## Cek jumlah duplikat nrp
library(dplyr)
# Cari NRP yang duplikat
duplikat_nrp <- df1 %>%
group_by(nrp) %>%
filter(n() > 1) %>%
ungroup()
df1_raw <- df1
# nrow(df1)
# nrow(duplikat_nrp)
# df1$nrp
# df1$name
# df1$faculty
# tab(df1[,4:47]
#nrow(df1_raw)
#nrow(df1)
#length(unique(df1$faculty))
#sum(!is.na(df1$faculty))
df1$faculty <- df1$Fakultas
df1 <- df1[,-c(1,4)]
df_Normal <- df1[,c(1:3,4:28)] # Tes Normal
df_Gangguan <- df1[,c(1:3,29:38)] # Tes Gangguan
df_Faktor <- df1[,c(1:3,39:45)] # Tes Faktor
df_Validitas <- df1[,c(1:3,46:47)] # Tes Validitas
#| label: Demografi
#| results: hide
# Hitung jumlah mahssis tanpa fakutlas
df1_abnormal <- df1 %>%
filter(rowSums(select(., 29:38) >= 70, na.rm = TRUE) > 0)
n_total <- nrow(df1)
n_dis <- nrow(df1_abnormal)
prop0 <- n_dis / n_total * 100
df1_abnormal <- df1 %>%
filter(rowSums(select(., 29:38) >= 70, na.rm = TRUE) > 1)
n_total <- nrow(df1)
n_dis <- nrow(df1_abnormal)
prop1 <- n_dis / n_total * 100
df1_abnormal <- df1 %>%
filter(rowSums(select(., 29:38) >= 70, na.rm = TRUE) > 4)
n_total <- nrow(df1)
n_dis <- nrow(df1_abnormal)
prop2 <- n_dis / n_total * 100
#| component: valuebox
#| title: "Proporsi Mahasiswa dengan Gangguan Kepribadian (Minimal 1)"
list(
icon = "person",
color = "red",
value = paste0(round(prop0, 1), "%"," ", "(", prop0/100*nrow(df1),")")
)
#| component: valuebox
#| title: "Proporsi Mahasiswa dengan >1 Gangguan Kepribadian"
list(
icon = "person",
color = "yellow",
value = paste0(round(prop1, 1), "%"," ", "(", prop1/100*nrow(df1),")")
)
#| component: valuebox
#| title: "Proporsi Mahasiswa dengan >4 Gangguan Kepribadian"
list(
icon = "person",
color = "primary",
value = paste0(round(prop2, 1), "%"," ", "(", prop2/100*nrow(df1),")")
)
#| title: Kategori Skor Sifat Normal dan Faktor
## Load necessary library
library(DT)
# Create a data frame with the translated categories, keeping original column names
data <- data.frame(
"Rentang Skor" = c("< 35", "35-44", "45-55", "56-65", ">65"),
"Kategori" = c("Rendah", "Rata-rata rendah", "Rata-rata",
"Rata-rata tinggi", "Tinggi"),
check.names = FALSE  # Preserve column names with spaces
)
# Display the table with DT for a visually appealing format
datatable(data,
options = list(pageLength = 5, # Sets number of rows per page
dom = 't'), # Hides the search bar and pagination,
rownames = T) %>%
formatStyle(columns = c("Rentang Skor", "Kategori"),
backgroundColor = styleEqual(c("< 35", "35-44", "45-55", "56-65", ">65"),
c( "#FFD1A1", "#FFC081", "#FFA561", "#FF8E41", "#FF6E21")))
#| title: Kategori Skor Gangguan Kepribadian
## Load necessary library
library(DT)
# Create a data frame with the translated categories, keeping original column names
data <- data.frame(
"Rentang Skor" = c("<70", ">=70"),
"Kategori" = c("Normal", "Gangguan Kepribadian"),
check.names = FALSE  # Preserve column names with spaces
)
# Display the table with DT for a visually appealing format
datatable(data,
options = list(pageLength = 5, # Sets number of rows per page
dom = 't'), # Hides the search bar and pagination,
rownames = T) %>%
formatStyle(columns = c("Rentang Skor", "Kategori"),
backgroundColor = styleEqual(c("<70", ">=70"),
c( "#FFD1A1", "#FF6E21")))
#| title: OMNI Personality Inventory
# Displaying the image using Markdown syntax
knitr::include_graphics("omni.png")
# Seed untuk reproduksi hasil yang sama (opsional)
set.seed(20250503)
# Buat nama fakultas random
random_fakultas_names <- c(
"Fakultas Sains dan Teknologi", "Fakultas Humaniora", "Fakultas Kedokteran",
"Fakultas Pertanian", "Fakultas Hukum", "Fakultas Psikologi",
"Fakultas Seni Rupa"
)
# Acak urutan nama fakultas random
fakultas <- unique(df1$faculty)
random_fakultas <- sample(random_fakultas_names, length(fakultas), replace = FALSE)
# Buat mapping dari fakultas asli ke fakultas acak
fakultas_map <- setNames(random_fakultas, fakultas)
# Tampilkan mapping fakultas
print("Mapping Fakultas (Asli -> Random):")
for (i in 1:length(fakultas)) {
cat(fakultas[i], " -> ", fakultas_map[fakultas[i]], "\n")
}
# Membuat nama-nama random untuk program studi
# Contoh prefiks untuk jenjang pendidikan
jenjang <- c("S1", "S2", "D3", "D4")
# Contoh nama-nama program studi acak
nama_program <- c(
"Biologi", "Matematika", "Fisika", "Kimia", "Astronomi",
"Akuntansi", "Manajemen", "Ekonomi", "Bisnis Digital", "Keuangan",
"Hukum", "Ilmu Politik", "Administrasi Publik", "Hubungan Internasional",
"Psikologi", "Sosiologi", "Antropologi", "Arkeologi", "Filsafat",
"Sastra Indonesia", "Sastra Inggris", "Sastra Jepang", "Sastra Mandarin",
"Kedokteran", "Kedokteran Gigi", "Farmasi", "Kesehatan Masyarakat", "Keperawatan",
"Arsitektur", "Teknik Sipil", "Teknik Lingkungan", "Perencanaan Wilayah",
"Ilmu Komputer", "Sistem Informasi", "Teknik Informatika", "Data Science",
"Desain Grafis", "Desain Interior", "Seni Murni", "Fotografi", "Animasi",
"Pertanian", "Peternakan", "Kehutanan", "Perikanan", "Agribisnis",
"Pariwisata", "Perhotelan", "Kuliner", "Media dan Komunikasi", "Jurnalistik"
)
# Membuat kombinasi random untuk program studi
program_studi <- unique(df1$ProgramStudi)
sample_jenjang <- sample(jenjang, length(program_studi), replace = TRUE)
sample_program <- sample(nama_program, length(program_studi), replace = TRUE)
random_program_baru <- paste(sample_jenjang, sample_program)
# Membuat mapping dengan nama-nama baru
program_studi_map_baru <- setNames(random_program_baru, program_studi)
# Tampilkan beberapa mapping program studi dengan nama baru (10 pertama)
print("\nMapping Program Studi dengan Nama Baru (10 pertama) (Asli -> Random):")
for (i in 1:min(10, length(program_studi))) {
cat(program_studi[i], " -> ", program_studi_map_baru[program_studi[i]], "\n")
}
# Terapkan mapping ke dataframe asli
df1$faculty <- fakultas_map[df1$faculty]
df1$ProgramStudi <- program_studi_map_baru[df1$ProgramStudi]  # atau program_studi_map_baru
# Cek hasil
head(df1)
unique(df1$faculty)
unique(df1$ProgramStudi)
library(shiny)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(DT)
# Memuat data
df1 <- read_excel("teskepribadian_export_20241021.xlsx")
# Cek NA
#sum(is.na(df1$Fakultas))
#sum(is.na(df1$ProgramStudi))
# Delete data if "current_distress", "variable_response_inconsistency" >= 70
df1 <- df1[!(df1$variable_response_inconsistency >= 70),]
# Preproses data - Hapus Kata Fakultas di Kolom Fakultas
df1$Fakultas <- gsub("Fakultas ", "", df1$Fakultas)
df1 <- df1 |>
# Delete duplicate rows if all column values are the same
distinct(.keep_all = TRUE)
df1[df1$Fakultas == "Komunikasi Dan Ilmu Sosial","Fakultas"] <- "Komunikasi dan Ilmu Sosial"
#  unique(df1$ProgramStudi)
## Cek jumlah duplikat nrp
library(dplyr)
# Cari NRP yang duplikat
duplikat_nrp <- df1 %>%
group_by(nrp) %>%
filter(n() > 1) %>%
ungroup()
df1_raw <- df1
# nrow(df1)
# nrow(duplikat_nrp)
# df1$nrp
# df1$name
# df1$faculty
# tab(df1[,4:47]
#nrow(df1_raw)
#nrow(df1)
#length(unique(df1$faculty))
#sum(!is.na(df1$faculty))
df1$faculty <- df1$Fakultas
df1 <- df1[,-c(1,4)]
df_Normal <- df1[,c(1:3,4:28)] # Tes Normal
df_Gangguan <- df1[,c(1:3,29:38)] # Tes Gangguan
df_Faktor <- df1[,c(1:3,39:45)] # Tes Faktor
df_Validitas <- df1[,c(1:3,46:47)] # Tes Validitas
#| label: Demografi
#| results: hide
# Hitung jumlah mahssis tanpa fakutlas
df1_abnormal <- df1 %>%
filter(rowSums(select(., 29:38) >= 70, na.rm = TRUE) > 0)
n_total <- nrow(df1)
n_dis <- nrow(df1_abnormal)
prop0 <- n_dis / n_total * 100
df1_abnormal <- df1 %>%
filter(rowSums(select(., 29:38) >= 70, na.rm = TRUE) > 1)
n_total <- nrow(df1)
n_dis <- nrow(df1_abnormal)
prop1 <- n_dis / n_total * 100
df1_abnormal <- df1 %>%
filter(rowSums(select(., 29:38) >= 70, na.rm = TRUE) > 4)
n_total <- nrow(df1)
n_dis <- nrow(df1_abnormal)
prop2 <- n_dis / n_total * 100
#| component: valuebox
#| title: "Proporsi Mahasiswa dengan Gangguan Kepribadian (Minimal 1)"
list(
icon = "person",
color = "red",
value = paste0(round(prop0, 1), "%"," ", "(", prop0/100*nrow(df1),")")
)
#| component: valuebox
#| title: "Proporsi Mahasiswa dengan >1 Gangguan Kepribadian"
list(
icon = "person",
color = "yellow",
value = paste0(round(prop1, 1), "%"," ", "(", prop1/100*nrow(df1),")")
)
#| component: valuebox
#| title: "Proporsi Mahasiswa dengan >4 Gangguan Kepribadian"
list(
icon = "person",
color = "primary",
value = paste0(round(prop2, 1), "%"," ", "(", prop2/100*nrow(df1),")")
)
#| title: Kategori Skor Sifat Normal dan Faktor
## Load necessary library
library(DT)
# Create a data frame with the translated categories, keeping original column names
data <- data.frame(
"Rentang Skor" = c("< 35", "35-44", "45-55", "56-65", ">65"),
"Kategori" = c("Rendah", "Rata-rata rendah", "Rata-rata",
"Rata-rata tinggi", "Tinggi"),
check.names = FALSE  # Preserve column names with spaces
)
# Display the table with DT for a visually appealing format
datatable(data,
options = list(pageLength = 5, # Sets number of rows per page
dom = 't'), # Hides the search bar and pagination,
rownames = T) %>%
formatStyle(columns = c("Rentang Skor", "Kategori"),
backgroundColor = styleEqual(c("< 35", "35-44", "45-55", "56-65", ">65"),
c( "#FFD1A1", "#FFC081", "#FFA561", "#FF8E41", "#FF6E21")))
#| title: Kategori Skor Gangguan Kepribadian
## Load necessary library
library(DT)
# Create a data frame with the translated categories, keeping original column names
data <- data.frame(
"Rentang Skor" = c("<70", ">=70"),
"Kategori" = c("Normal", "Gangguan Kepribadian"),
check.names = FALSE  # Preserve column names with spaces
)
# Display the table with DT for a visually appealing format
datatable(data,
options = list(pageLength = 5, # Sets number of rows per page
dom = 't'), # Hides the search bar and pagination,
rownames = T) %>%
formatStyle(columns = c("Rentang Skor", "Kategori"),
backgroundColor = styleEqual(c("<70", ">=70"),
c( "#FFD1A1", "#FF6E21")))
#| title: OMNI Personality Inventory
# Displaying the image using Markdown syntax
knitr::include_graphics("omni.png")
# Seed untuk reproduksi hasil yang sama (opsional)
set.seed(20250503)
# Buat nama fakultas random
random_fakultas_names <- c(
"Fakultas Sains dan Teknologi", "Fakultas Humaniora", "Fakultas Kedokteran",
"Fakultas Pertanian", "Fakultas Hukum", "Fakultas Psikologi",
"Fakultas Seni Rupa"
)
# Acak urutan nama fakultas random
fakultas <- unique(df1$faculty)
random_fakultas <- sample(random_fakultas_names, length(fakultas), replace = FALSE)
# Buat mapping dari fakultas asli ke fakultas acak
fakultas_map <- setNames(random_fakultas, fakultas)
# Membuat nama-nama random untuk program studi
# Contoh prefiks untuk jenjang pendidikan
jenjang <- c("S1", "S2", "D3", "D4")
# Contoh nama-nama program studi acak
nama_program <- c(
"Biologi", "Matematika", "Fisika", "Kimia", "Astronomi",
"Akuntansi", "Manajemen", "Ekonomi", "Bisnis Digital", "Keuangan",
"Hukum", "Ilmu Politik", "Administrasi Publik", "Hubungan Internasional",
"Psikologi", "Sosiologi", "Antropologi", "Arkeologi", "Filsafat",
"Sastra Indonesia", "Sastra Inggris", "Sastra Jepang", "Sastra Mandarin",
"Kedokteran", "Kedokteran Gigi", "Farmasi", "Kesehatan Masyarakat", "Keperawatan",
"Arsitektur", "Teknik Sipil", "Teknik Lingkungan", "Perencanaan Wilayah",
"Ilmu Komputer", "Sistem Informasi", "Teknik Informatika", "Data Science",
"Desain Grafis", "Desain Interior", "Seni Murni", "Fotografi", "Animasi",
"Pertanian", "Peternakan", "Kehutanan", "Perikanan", "Agribisnis",
"Pariwisata", "Perhotelan", "Kuliner", "Media dan Komunikasi", "Jurnalistik"
)
# Membuat kombinasi random untuk program studi
program_studi <- unique(df1$ProgramStudi)
sample_jenjang <- sample(jenjang, length(program_studi), replace = TRUE)
sample_program <- sample(nama_program, length(program_studi), replace = TRUE)
random_program_baru <- paste(sample_jenjang, sample_program)
# Membuat mapping dengan nama-nama baru
program_studi_map_baru <- setNames(random_program_baru, program_studi)
# Terapkan mapping ke dataframe asli
df1$faculty <- fakultas_map[df1$faculty]
df1$ProgramStudi <- program_studi_map_baru[df1$ProgramStudi]  # atau program_studi_map_baru
#| title: Jumlah Mahasiswa per Fakultas
#plotly
library(dplyr)
library(plotly)
df1 %>%
count(faculty, .drop = FALSE) %>%
mutate(n_text = paste(scales::number(n, big.mark = ","), "Mahasiswa")) %>%
plot_ly(
x = ~n,
y = ~faculty,
hovertemplate = "%{hovertext}<extra></extra>",
hovertext = ~n_text,
type = "bar",
orientation = "h",
name = "",
marker = list(color = "steelblue")
) %>%
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = "", ticksuffix = " ", tickfont = list(size = 12))
) %>%
config(displayModeBar = F)
#| title: Jumlah Mahasiswa per Program Studi
# Memuat library yang diperlukan
library(dplyr)
library(DT)
# Menghitung jumlah mahasiswa per Program Studi
df_table <- df1 %>%
count(ProgramStudi, .drop = F) %>%
mutate(`Jumlah Mahasiswa` = scales::number(n, big.mark = ","))  %>%
arrange(desc(n)) %>%
select(ProgramStudi, `Jumlah Mahasiswa`)  # Format angka dengan tanda koma
# Menampilkan tabel interaktif dengan DT
datatable(
df_table,
options = list(
dom = 't',  # Hanya menampilkan tabel tanpa fitur pencarian dan pagination
pageLength = 10,  # Jumlah baris per halaman
autoWidth = TRUE  # Menyesuaikan lebar kolom secara otomatis
)
)
#| title: Proporsi Mahasiswa dengan Gangguan Kepribadian per Fakultas
library(scales)
df1_abnormal <- df1 %>%
filter(rowSums(select(., 29:38) >= 70, na.rm = TRUE) > 0)
# Menghitung total mahasiswa per fakultas dari df1
total_per_fakultas <- df1 %>%
count(faculty, .drop = FALSE) %>%
rename(total_fakultas = n)
# Menggabungkan dengan df1_abnormal untuk menghitung proporsi abnormal per fakultas dan mengurutkan
df_abnormal_plot <- df1_abnormal %>%
count(faculty, .drop = FALSE) %>%
left_join(total_per_fakultas, by = "faculty") %>%
mutate(
proporsi = n / total_fakultas * 100,  # Menghitung proporsi per fakultas
n_text = paste0(round(proporsi, 1), "%")  # Menampilkan proporsi dalam format persen
) %>%
arrange(proporsi) %>%  # Mengurutkan berdasarkan proporsi
mutate(faculty = factor(faculty, levels = unique(faculty)))  # Set factor levels
# Membuat plot dengan pengurutan faculty
df_abnormal_plot %>%
plot_ly(
x = ~proporsi,
y = ~faculty,
hovertemplate = "%{hovertext}<extra></extra>",
hovertext = ~n_text,
type = "bar",
orientation = "h",
name = "",
marker = list(color = "steelblue")
) %>%
layout(
title = "",
xaxis = list(title = ""),
yaxis = list(title = "", ticksuffix = " ", tickfont = list(size = 12))
) %>%
config(displayModeBar = F)
#| title: Gangguan Kepribadian Terbanyak
# Menggabungkan dengan df1_abnormal untuk menghitung proporsi abnormal per fakultas dan mengurutkan
df1_abnormal <- df_Gangguan %>%
filter(rowSums(select(., 4:13) >= 70, na.rm = TRUE) > 0)
hasil_abnormal <- df1_abnormal %>%
summarise(across(4:13, ~sum(. >= 70, na.rm = TRUE)))
df_abnormal_plot <- data.frame(
gangguan = names(hasil_abnormal),
jumlah = unlist(hasil_abnormal)/nrow(df1)
)
# Mengurutkan data berdasarkan jumlah dari besar ke kecil
df_abnormal_plot <- df_abnormal_plot %>%
arrange(desc(jumlah)) %>%
mutate(gangguan = factor(gangguan, levels = rev(gangguan)))  # Menjadikan gangguan sebagai faktor berurut
# Membuat plot interaktif
plot_ly(
data = df_abnormal_plot,
x = ~jumlah,
y = ~gangguan,
type = "bar",
orientation = "h",
name = "",
marker = list(
color = ~jumlah,  # Warna berdasarkan nilai
colorscale = "red"  # Gradasi warna bawaan plotly
)
) %>%
layout(
title = "",
xaxis = list(title = "Proporsi", tickformat = ".0%"),
yaxis = list(title = "", tickfont = list(size = 12)),
bargap = 0.2
) %>%
config(displayModeBar = FALSE)
df_Gangguan
df_Gangguan$faculty <- df1$faculty
df_Gangguan$ProgramStudi <- df1$ProgramStudi
